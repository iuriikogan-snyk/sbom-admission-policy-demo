apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: vulnerabilityreportvalidation
spec:
  crd:
    spec:
      names:
        kind: VulnerabilityReportValidation
      validation:
        openAPIV3Schema:
          type: object
          properties:
            issuer:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package vulnerabilityreportvalidation

        # This template defines policy for vulnerability report validation.
        # It checks the following:
        # - If there are any system errors
        # - If there are errors for any of the images
        # - There is at least one vulnerability report that was verified
        # - Only considers the latest vulnerability report
        # - The latest vulnerability report is valid (isSuccess = true)
        # - The latest vulnerability report has a valid notary project signature (if require_signature = true)

        import future.keywords.if
        import future.keywords.in
        import future.keywords.every

        default require_signature := false # change to true to require notary project signature on vulnerability report

        # Get data from Ratify
        remote_data := response {
          images := [img | img = input.review.object.spec.containers[_].image]
          images_init := [img | img = input.review.object.spec.initContainers[_].image]
          images_ephemeral := [img | img = input.review.object.spec.ephemeralContainers[_].image]
          other_images := array.concat(images_init, images_ephemeral)
          all_images := array.concat(other_images, images)
          response := external_data({"provider": "ratify-provider", "keys": all_images})
        }

        violation[{"msg": msg}] {
          general_violation[{"result": msg}]
        }

        # Check if there are any system errors
        general_violation[{"result": result}] {
          err := remote_data.system_error
          err != ""
          result := sprintf("System error calling external data provider for vulnerability report verification: %s", [err])
        }

        # Check if there are errors for any of the images
        general_violation[{"result": result}] {
          count(remote_data.errors) > 0
          result := sprintf("Error validating one or more images for vulnerability report verification: %s", remote_data.errors)
        }

        # Check if the success criteria is true
        general_violation[{"result": result}] {
          subject_validation := remote_data.responses[_]
          subject_result := subject_validation[1]
          not process_vuln_reports(subject_result)
          result := sprintf("Subject failed vulnerability report verification: %s", [subject_validation[0]])
        }

        process_vuln_reports(subject_result) if {
          # collect verifier reports from vulnerabilityreport verifier
          vuln_results := [res | subject_result.verifierReports[i].type == "vulnerabilityreport"; res := subject_result.verifierReports[i]]
          count(vuln_results) > 0
          # calculate the timestamp between current time and creation time
          timestamp_diff_results_map := {diff_in_ns: i | diff_in_ns := time.now_ns() - time.parse_rfc3339_ns(vuln_results[i].extensions["createdAt"])}
          count(timestamp_diff_results_map) > 0
          # extract time difference durations into separate array to find global minimum
          timestamp_diff_results_arr := [key | timestamp_diff_results_map[key]]
          smallest_timestamp_diff := min(timestamp_diff_results_arr)
          # validate latest report
          process_vuln_report(vuln_results[timestamp_diff_results_map[smallest_timestamp_diff]])
        }

        process_vuln_report(report) if {
          report.isSuccess == true
          valid_signatures(report)
        }

        valid_signatures(_) := true {
          require_signature == false
        }

        valid_signatures(report) := true {
          require_signature
          count(report.nestedResults) > 0
          some nestedResult in report.nestedResults
          nestedResult.artifactType == "application/vnd.cncf.notary.signature"
          nestedResult.isSuccess
        }
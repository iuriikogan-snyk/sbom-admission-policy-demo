apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: vulnerabilityreportvalidation
spec:
  crd:
    spec:
      names:
        kind: VulnerabilityReportValidation
      validation:
        openAPIV3Schema:
          type: object
          properties:
            issuer:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package vulnerabilityreportvalidation

        # This template defines policy for SARIF vulnerability report validation.
        # It checks the following:
        # - If the SARIF report has valid data
        # - If any reported vulnerability exceeds a severity threshold
        # - If remediation is available for high-severity vulnerabilities
        # - Only considers vulnerabilities with a valid CVSS score

        import future.keywords.if
        import future.keywords.in
        import future.keywords.every

        default severity_threshold := 0  # Adjust severity threshold for violations

        # Violation rule: Checks for vulnerabilities with high severity.
        violation[{"msg": msg}] {
          sarif_run := input.review.object.sarif.runs[_]
          vuln := sarif_run.tool.driver.rules[_]
          is_high_severity(vuln)
          msg := sprintf("Vulnerability detected: %s (ID: %s, Severity: %f)", [vuln.fullDescription.text, vuln.id, vuln.properties.cvssv3_baseScore])
        }

        # Utility rule: Checks if a vulnerability exceeds the severity threshold
        is_high_severity(vuln) {
          vuln.properties.cvssv3_baseScore >= severity_threshold
        }

        # Violation rule: Ensures vulnerabilities have available remediation steps
        violation[{"msg": msg}] {
          sarif_run := input.review.object.sarif.runs[_]
          vuln := sarif_run.tool.driver.rules[_]
          vuln.properties.cvssv3_baseScore >= severity_threshold
          no_remediation(vuln)
          msg := sprintf("High severity vulnerability %s has no remediation steps.", [vuln.id])
        }

        # Utility rule: Check if a vulnerability has no remediation
        no_remediation(vuln) {
          vuln.help.markdown == ""
        }

        # Violation rule: Ensure the SARIF report contains valid CVSS scores for each vulnerability
        violation[{"msg": msg}] {
          sarif_run := input.review.object.sarif.runs[_]
          vuln := sarif_run.tool.driver.rules[_]
          not has_valid_cvss(vuln)
          msg := sprintf("Vulnerability %s does not have a valid CVSS score.", [vuln.id])
        }

        # Utility rule: Check for valid CVSS score in vulnerability report
        has_valid_cvss(vuln) {
          vuln.properties.cvssv3_baseScore > 0
        }

apiVersion: templates.gatekeeper.sh/v1beta1
kind: ConstraintTemplate
metadata:
  name: vulnerabilityreportvalidation
spec:
  crd:
    spec:
      names:
        kind: VulnerabilityReportValidation
      validation:
        openAPIV3Schema:
          type: object
          properties:
            issuer:
              type: string
  targets:
    - target: admission.k8s.gatekeeper.sh
      rego: |
        package vulnerabilityreportvalidation

        # Default threshold for flagging high-severity vulnerabilities
        default severity_threshold := 7.0

        # Ensure SARIF structure is valid before processing (checks core SARIF elements)
        input_is_valid {
          input.review.object.sarif.version == "2.1.0"
          input.review.object.sarif.runs[_]
        }

        # Violation: Identifies high-severity vulnerabilities based on severity threshold
        violation[{"msg": msg}] {
          input_is_valid
          sarif_run := input.review.object.sarif.runs[_]
          vuln := sarif_run.tool.driver.rules[_]
          is_high_severity(vuln)
          msg := sprintf("High-severity vulnerability detected: %s (ID: %s, Severity: %f)", [vuln.fullDescription.text, vuln.id, vuln.properties.cvssv3_baseScore])
        }

        # Utility to check if vulnerability meets/exceeds severity threshold
        is_high_severity(vuln) {
          vuln.properties.cvssv3_baseScore >= severity_threshold
        }

        # Violation: Ensure high-severity vulnerabilities have remediation information
        violation[{"msg": msg}] {
          input_is_valid
          sarif_run := input.review.object.sarif.runs[_]
          vuln := sarif_run.tool.driver.rules[_]
          vuln.properties.cvssv3_baseScore >= severity_threshold
          no_remediation(vuln)
          msg := sprintf("High-severity vulnerability %s has no remediation steps.", [vuln.id])
        }

        # Utility to check if a vulnerability lacks remediation details
        no_remediation(vuln) {
          vuln.help.markdown == ""
        }

        # Violation: Confirm all vulnerabilities contain valid CVSS scores
        violation[{"msg": msg}] {
          input_is_valid
          sarif_run := input.review.object.sarif.runs[_]
          vuln := sarif_run.tool.driver.rules[_]
          not has_valid_cvss(vuln)
          msg := sprintf("Vulnerability %s does not have a valid CVSS score.", [vuln.id])
        }

        # Utility: Checks if a vulnerability has a valid CVSS score
  
